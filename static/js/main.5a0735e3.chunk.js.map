{"version":3,"sources":["Components/Card.js","Containers/Navigation.js","Actions/imagesActions.js","Components/Dashboard.js","App.js","Reducers/imagesReducer.js","store.js","index.js"],"names":["Card","props","react_default","a","createElement","className","key","img","id","img-container","src","images","downsized_medium","url","alt","title","Navigation","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadImages","more","arguments","length","undefined","setState","page","state","fetchImages","search","handleSearch","event","target","value","handleKeyPress","window","onscroll","innerHeight","document","documentElement","scrollTop","offsetHeight","_this2","type","placeholder","onKeyPress","onChange","onClick","Component","connect","offset","loadMore","payload","axios","get","concat","meta","Dashboard","data","map","Components_Card","list","getList","Containers_Navigation","App","Components_Dashboard","initialState","status","reducers","combineReducers","action","objectSpread","toConsumableArray","store","createStore","applyMiddleware","logger","promiseMiddleware","ReactDOM","render","es","src_App","getElementById"],"mappings":"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","file":"static/js/main.5a0735e3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    return(\n        <div className=\"card col-md-12 text-center img-wraper\" key={props.img.id}>\n            <img\n                className=\"card-img-top\"\n                img-container\n                src={props.img.images.downsized_medium.url}\n                alt={props.img.title}\n            />\n            <div className=\"card-body\">\n                <p className=\"card-text\">{props.img.title}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport { fetchImages } from '../Actions/imagesActions'\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { page: 0, search: \"\" }\n        // Pagination logic for images\n        window.onscroll = () => {\n            let scrolledCount = window.innerHeight + document.documentElement.scrollTop\n            if ( scrolledCount === document.documentElement.offsetHeight) this.loadImages(true)\n        };\n    }\n    /**\n    * Used to fetch data for the first time\n    * If we go to the end of page this is used to get new data\n    **/\n    loadImages = (more = false) => {\n        this.setState({page: more ? this.state.page + 1 : 0})\n        this.props.fetchImages(this.state.page, this.state.search, more)\n    }\n\n    // On search field change\n    handleSearch = (event) => { this.setState({search: event.target.value}) }\n\n    handleKeyPress = (event) => {\n        if(event.key === 'Enter'){\n            this.loadImages()\n        }\n    }\n\n    render() {\n    return (\n        <div className=\"container-fluid\">\n            <nav className=\"navbar navbar-light bg-light fixed-top\">\n                <div className=\"form-inline offset-md-5 \">\n                    <input\n                        className=\"form-control mr-sm-2\"\n                        type=\"search\"\n                        placeholder=\"Search\"\n                        value={this.state.search}\n                        onKeyPress={this.handleKeyPress}\n                        onChange={this.handleSearch} />\n                    <button\n                        className=\"btn btn-outline-success my-2 my-sm-0\"\n                        type=\"submit\"\n                        onClick={() => this.loadImages()}>\n                        Search\n                    </button>\n                </div>\n            </nav>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ images: state.images })\n\nexport default connect(\n    mapStateToProps, {fetchImages}\n)(Navigation)\n\nexport { Navigation as UnConnectedNavigation }\n","import axios from 'axios'\n\nconst APIkey = \"CdRKiCMbTnt9CkZTZ0lGukSczk6iT4Z6\"\nconst limit = 10\nlet baseURI = `http://api.giphy.com/v1/gifs/search?q=`\n\nexport const fetchImages = (offset, search, loadMore) => ({\n  type: \"GET_IMAGES\",\n  payload: axios.get(`${baseURI}${search}&api_key=${APIkey}&limit=${limit}&offset=${offset*limit}`),\n  meta: loadMore,\n})\n","import React, { Component } from 'react';\nimport {connect} from 'react-redux'\nimport Card from '../Components/Card'\nimport Navigation from '../Containers/Navigation.js'\n\nclass Dashboard extends Component {\n    getList() {\n        let component;\n        if(this.props.images.data.length > 0) {\n            component = this.props.images.data.map( img => <Card img={img} key={img.title}/>)\n        } else {\n            component = <div className=\"no-content\"> No content avaliable...</div>\n        }\n        return component\n    }\n    render() {\n        const list = this.getList()\n        return (\n            <div className=\"container-fluid\">\n                <Navigation />\n                <div className=\"img-container justify-content-md-center offset-md-4 col-md-4\">\n                    { list }\n                </div>\n            </div>\n        );\n  }\n}\n\nconst mapStateToProps = (state) => ({ images: state.images })\n\nexport default connect(\n    mapStateToProps\n)(Dashboard)\n\nexport { Dashboard as UnConnectedDashboard }\n","import React from 'react';\nimport './scss/css/style.css';\nimport Dashboard from './Components/Dashboard.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      < Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","\nlet initialState = { data: [], status: \"completed\" }\n\n/**\n * Images reducer\n * If it is changed by pagination we need to add data to previous array\n */\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case 'GET_IMAGES_PENDING':\n            return {\n                ...state,\n                status: \"pending\"\n            }\n        case 'GET_IMAGES_FULFILLED':\n            return {\n                ...state,\n                data: action.meta ? [\n                        ...state.data,\n                        ...action.payload.data.data\n                    ] : action.payload.data.data,\n                status: \"completed\"\n            }\n        default:\n            return state\n    }\n}\n","import {createStore, combineReducers, applyMiddleware} from 'redux'\nimport { logger } from 'redux-logger'\nimport promiseMiddleware from 'redux-promise-middleware';\n\nimport images from './Reducers/imagesReducer'\n\n\nconst reducers = combineReducers({\n    images: images\n})\n\nconst store = createStore(reducers, applyMiddleware(logger, promiseMiddleware))\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}